package com.xinonix.hl7.fhir.stu3;

import java.util.ArrayList;
import java.util.Date;

import com.google.gson.annotations.Expose;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.JsonAdapter;

import com.xinonix.serialization.DateTypeAdapterDate;
import com.xinonix.serialization.DateTypeAdapterTime;
import com.xinonix.serialization.DateTimeAdapterDateTime;

/**
 * Captures constraints on each element within the resource, profile, or extension.
 */
public class ElementDefinition extends Element {
	@Expose
	private String path;

	/**
	 * Getter for path
	 * @return The path identifies the element and is expressed as a "."-separated list of ancestor elements, beginning with the name of the resource or extension.
	 */
	public String getPath() { return path; }

	/**
	 * Setter for path
	 * @param value The path identifies the element and is expressed as a "."-separated list of ancestor elements, beginning with the name of the resource or extension.
	 */
	public void setPath(String value) { path = value; }


	@Expose
	private ArrayList<String> representation;

	/**
	 * Getter for representation
	 * @return Codes that define how this element is represented in instances, when the deviation varies from the normal case.
	 */
	public ArrayList<String> getRepresentation() { return representation; }

	/**
	 * Setter for representation
	 * @param value Codes that define how this element is represented in instances, when the deviation varies from the normal case.
	 */
	public void setRepresentation(ArrayList<String> value) { representation = value; }


	@Expose
	private String sliceName;

	/**
	 * Getter for sliceName
	 * @return The name of this element definition slice, when slicing is working. The name must be a token with no dots or spaces. This is a unique name referring to a specific set of constraints applied to this element, used to provide a name to different slices of the same element.
	 */
	public String getSliceName() { return sliceName; }

	/**
	 * Setter for sliceName
	 * @param value The name of this element definition slice, when slicing is working. The name must be a token with no dots or spaces. This is a unique name referring to a specific set of constraints applied to this element, used to provide a name to different slices of the same element.
	 */
	public void setSliceName(String value) { sliceName = value; }


	@Expose
	private String label;

	/**
	 * Getter for label
	 * @return A single preferred label which is the text to display beside the element indicating its meaning or to use to prompt for the element in a user display or form.
	 */
	public String getLabel() { return label; }

	/**
	 * Setter for label
	 * @param value A single preferred label which is the text to display beside the element indicating its meaning or to use to prompt for the element in a user display or form.
	 */
	public void setLabel(String value) { label = value; }


	@Expose
	private ArrayList<Coding> code;

	/**
	 * Getter for code
	 * @return A code that has the same meaning as the element in a particular terminology.
	 */
	public ArrayList<Coding> getCode() { return code; }

	/**
	 * Setter for code
	 * @param value A code that has the same meaning as the element in a particular terminology.
	 */
	public void setCode(ArrayList<Coding> value) { code = value; }


	@Expose
	private ElementDefinitionSlicing slicing;

	/**
	 * Getter for slicing
	 * @return Indicates that the element is sliced into a set of alternative definitions (i.e. in a structure definition, there are multiple different constraints on a single element in the base resource). Slicing can be used in any resource that has cardinality ..* on the base resource, or any resource with a choice of types. The set of slices is any elements that come after this in the element sequence that have the same path, until a shorter path occurs (the shorter path terminates the set).
	 */
	public ElementDefinitionSlicing getSlicing() { return slicing; }

	/**
	 * Setter for slicing
	 * @param value Indicates that the element is sliced into a set of alternative definitions (i.e. in a structure definition, there are multiple different constraints on a single element in the base resource). Slicing can be used in any resource that has cardinality ..* on the base resource, or any resource with a choice of types. The set of slices is any elements that come after this in the element sequence that have the same path, until a shorter path occurs (the shorter path terminates the set).
	 */
	public void setSlicing(ElementDefinitionSlicing value) { slicing = value; }


	@Expose
	@SerializedName("short")
	private String shortValue;

	/**
	 * Getter for shortValue
	 * @return A concise description of what this element means (e.g. for use in autogenerated summaries).
	 */
	public String getShort() { return shortValue; }

	/**
	 * Setter for shortValue
	 * @param value A concise description of what this element means (e.g. for use in autogenerated summaries).
	 */
	public void setShort(String value) { shortValue = value; }


	@Expose
	private String definition;

	/**
	 * Getter for definition
	 * @return Provides a complete explanation of the meaning of the data element for human readability.  For the case of elements derived from existing elements (e.g. constraints), the definition SHALL be consistent with the base definition, but convey the meaning of the element in the particular context of use of the resource.
	 */
	public String getDefinition() { return definition; }

	/**
	 * Setter for definition
	 * @param value Provides a complete explanation of the meaning of the data element for human readability.  For the case of elements derived from existing elements (e.g. constraints), the definition SHALL be consistent with the base definition, but convey the meaning of the element in the particular context of use of the resource.
	 */
	public void setDefinition(String value) { definition = value; }


	@Expose
	private String comment;

	/**
	 * Getter for comment
	 * @return Explanatory notes and implementation guidance about the data element, including notes about how to use the data properly, exceptions to proper use, etc.
	 */
	public String getComment() { return comment; }

	/**
	 * Setter for comment
	 * @param value Explanatory notes and implementation guidance about the data element, including notes about how to use the data properly, exceptions to proper use, etc.
	 */
	public void setComment(String value) { comment = value; }


	@Expose
	private String requirements;

	/**
	 * Getter for requirements
	 * @return This element is for traceability of why the element was created and why the constraints exist as they do. This may be used to point to source materials or specifications that drove the structure of this element.
	 */
	public String getRequirements() { return requirements; }

	/**
	 * Setter for requirements
	 * @param value This element is for traceability of why the element was created and why the constraints exist as they do. This may be used to point to source materials or specifications that drove the structure of this element.
	 */
	public void setRequirements(String value) { requirements = value; }


	@Expose
	private ArrayList<String> alias;

	/**
	 * Getter for alias
	 * @return Identifies additional names by which this element might also be known.
	 */
	public ArrayList<String> getAlias() { return alias; }

	/**
	 * Setter for alias
	 * @param value Identifies additional names by which this element might also be known.
	 */
	public void setAlias(ArrayList<String> value) { alias = value; }


	@Expose
	private Integer min;

	/**
	 * Getter for min
	 * @return The minimum number of times this element SHALL appear in the instance.
	 */
	public Integer getMin() { return min; }

	/**
	 * Setter for min
	 * @param value The minimum number of times this element SHALL appear in the instance.
	 */
	public void setMin(Integer value) { min = value; }


	@Expose
	private String max;

	/**
	 * Getter for max
	 * @return The maximum number of times this element is permitted to appear in the instance.
	 */
	public String getMax() { return max; }

	/**
	 * Setter for max
	 * @param value The maximum number of times this element is permitted to appear in the instance.
	 */
	public void setMax(String value) { max = value; }


	@Expose
	private ElementDefinitionBase base;

	/**
	 * Getter for base
	 * @return Information about the base definition of the element, provided to make it unnecessary for tools to trace the deviation of the element through the derived and related profiles. This information is provided when the element definition is not the original definition of an element - i.g. either in a constraint on another type, or for elements from a super type in a snap shot.
	 */
	public ElementDefinitionBase getBase() { return base; }

	/**
	 * Setter for base
	 * @param value Information about the base definition of the element, provided to make it unnecessary for tools to trace the deviation of the element through the derived and related profiles. This information is provided when the element definition is not the original definition of an element - i.g. either in a constraint on another type, or for elements from a super type in a snap shot.
	 */
	public void setBase(ElementDefinitionBase value) { base = value; }


	@Expose
	private String contentReference;

	/**
	 * Getter for contentReference
	 * @return Identifies the identity of an element defined elsewhere in the profile whose content rules should be applied to the current element.
	 */
	public String getContentReference() { return contentReference; }

	/**
	 * Setter for contentReference
	 * @param value Identifies the identity of an element defined elsewhere in the profile whose content rules should be applied to the current element.
	 */
	public void setContentReference(String value) { contentReference = value; }


	@Expose
	private ArrayList<ElementDefinitionType> type;

	/**
	 * Getter for type
	 * @return The data type or resource that the value of this element is permitted to be.
	 */
	public ArrayList<ElementDefinitionType> getType() { return type; }

	/**
	 * Setter for type
	 * @param value The data type or resource that the value of this element is permitted to be.
	 */
	public void setType(ArrayList<ElementDefinitionType> value) { type = value; }


	@Expose
	private boolean defaultValueBoolean;

	/**
	 * Getter for defaultValueBoolean
	 * @return The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public boolean getDefaultValueBoolean() { return defaultValueBoolean; }

	/**
	 * Setter for defaultValueBoolean
	 * @param value The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public void setDefaultValueBoolean(boolean value) { defaultValueBoolean = value; }


	@Expose
	private Integer defaultValueInteger;

	/**
	 * Getter for defaultValueInteger
	 * @return The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public Integer getDefaultValueInteger() { return defaultValueInteger; }

	/**
	 * Setter for defaultValueInteger
	 * @param value The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public void setDefaultValueInteger(Integer value) { defaultValueInteger = value; }


	@Expose
	private Double defaultValueDecimal;

	/**
	 * Getter for defaultValueDecimal
	 * @return The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public Double getDefaultValueDecimal() { return defaultValueDecimal; }

	/**
	 * Setter for defaultValueDecimal
	 * @param value The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public void setDefaultValueDecimal(Double value) { defaultValueDecimal = value; }


	@Expose
	private String defaultValueBase64Binary;

	/**
	 * Getter for defaultValueBase64Binary
	 * @return The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public String getDefaultValueBase64Binary() { return defaultValueBase64Binary; }

	/**
	 * Setter for defaultValueBase64Binary
	 * @param value The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public void setDefaultValueBase64Binary(String value) { defaultValueBase64Binary = value; }


	@Expose
	private String defaultValueInstant;

	/**
	 * Getter for defaultValueInstant
	 * @return The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public String getDefaultValueInstant() { return defaultValueInstant; }

	/**
	 * Setter for defaultValueInstant
	 * @param value The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public void setDefaultValueInstant(String value) { defaultValueInstant = value; }


	@Expose
	private String defaultValueString;

	/**
	 * Getter for defaultValueString
	 * @return The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public String getDefaultValueString() { return defaultValueString; }

	/**
	 * Setter for defaultValueString
	 * @param value The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public void setDefaultValueString(String value) { defaultValueString = value; }


	@Expose
	private String defaultValueUri;

	/**
	 * Getter for defaultValueUri
	 * @return The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public String getDefaultValueUri() { return defaultValueUri; }

	/**
	 * Setter for defaultValueUri
	 * @param value The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public void setDefaultValueUri(String value) { defaultValueUri = value; }


	@Expose
	@JsonAdapter(DateTypeAdapterDate.class)
	private Date defaultValueDate;

	/**
	 * Getter for defaultValueDate
	 * @return The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public Date getDefaultValueDate() { return defaultValueDate; }

	/**
	 * Setter for defaultValueDate
	 * @param value The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public void setDefaultValueDate(Date value) { defaultValueDate = value; }


	@Expose
	@JsonAdapter(DateTimeAdapterDateTime.class)
	private Date defaultValueDateTime;

	/**
	 * Getter for defaultValueDateTime
	 * @return The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public Date getDefaultValueDateTime() { return defaultValueDateTime; }

	/**
	 * Setter for defaultValueDateTime
	 * @param value The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public void setDefaultValueDateTime(Date value) { defaultValueDateTime = value; }


	@Expose
	@JsonAdapter(DateTypeAdapterTime.class)
	private Date defaultValueTime;

	/**
	 * Getter for defaultValueTime
	 * @return The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public Date getDefaultValueTime() { return defaultValueTime; }

	/**
	 * Setter for defaultValueTime
	 * @param value The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public void setDefaultValueTime(Date value) { defaultValueTime = value; }


	@Expose
	private String defaultValueCode;

	/**
	 * Getter for defaultValueCode
	 * @return The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public String getDefaultValueCode() { return defaultValueCode; }

	/**
	 * Setter for defaultValueCode
	 * @param value The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public void setDefaultValueCode(String value) { defaultValueCode = value; }


	@Expose
	private String defaultValueOid;

	/**
	 * Getter for defaultValueOid
	 * @return The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public String getDefaultValueOid() { return defaultValueOid; }

	/**
	 * Setter for defaultValueOid
	 * @param value The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public void setDefaultValueOid(String value) { defaultValueOid = value; }


	@Expose
	private String defaultValueUuid;

	/**
	 * Getter for defaultValueUuid
	 * @return The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public String getDefaultValueUuid() { return defaultValueUuid; }

	/**
	 * Setter for defaultValueUuid
	 * @param value The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public void setDefaultValueUuid(String value) { defaultValueUuid = value; }


	@Expose
	private String defaultValueId;

	/**
	 * Getter for defaultValueId
	 * @return The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public String getDefaultValueId() { return defaultValueId; }

	/**
	 * Setter for defaultValueId
	 * @param value The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public void setDefaultValueId(String value) { defaultValueId = value; }


	@Expose
	private Integer defaultValueUnsignedInt;

	/**
	 * Getter for defaultValueUnsignedInt
	 * @return The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public Integer getDefaultValueUnsignedInt() { return defaultValueUnsignedInt; }

	/**
	 * Setter for defaultValueUnsignedInt
	 * @param value The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public void setDefaultValueUnsignedInt(Integer value) { defaultValueUnsignedInt = value; }


	@Expose
	private Integer defaultValuePositiveInt;

	/**
	 * Getter for defaultValuePositiveInt
	 * @return The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public Integer getDefaultValuePositiveInt() { return defaultValuePositiveInt; }

	/**
	 * Setter for defaultValuePositiveInt
	 * @param value The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public void setDefaultValuePositiveInt(Integer value) { defaultValuePositiveInt = value; }


	@Expose
	private String defaultValueMarkdown;

	/**
	 * Getter for defaultValueMarkdown
	 * @return The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public String getDefaultValueMarkdown() { return defaultValueMarkdown; }

	/**
	 * Setter for defaultValueMarkdown
	 * @param value The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public void setDefaultValueMarkdown(String value) { defaultValueMarkdown = value; }


	@Expose
	private Element defaultValueElement;

	/**
	 * Getter for defaultValueElement
	 * @return The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public Element getDefaultValueElement() { return defaultValueElement; }

	/**
	 * Setter for defaultValueElement
	 * @param value The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public void setDefaultValueElement(Element value) { defaultValueElement = value; }


	@Expose
	private Extension defaultValueExtension;

	/**
	 * Getter for defaultValueExtension
	 * @return The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public Extension getDefaultValueExtension() { return defaultValueExtension; }

	/**
	 * Setter for defaultValueExtension
	 * @param value The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public void setDefaultValueExtension(Extension value) { defaultValueExtension = value; }


	@Expose
	private BackboneElement defaultValueBackboneElement;

	/**
	 * Getter for defaultValueBackboneElement
	 * @return The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public BackboneElement getDefaultValueBackboneElement() { return defaultValueBackboneElement; }

	/**
	 * Setter for defaultValueBackboneElement
	 * @param value The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public void setDefaultValueBackboneElement(BackboneElement value) { defaultValueBackboneElement = value; }


	@Expose
	private Narrative defaultValueNarrative;

	/**
	 * Getter for defaultValueNarrative
	 * @return The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public Narrative getDefaultValueNarrative() { return defaultValueNarrative; }

	/**
	 * Setter for defaultValueNarrative
	 * @param value The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public void setDefaultValueNarrative(Narrative value) { defaultValueNarrative = value; }


	@Expose
	private Annotation defaultValueAnnotation;

	/**
	 * Getter for defaultValueAnnotation
	 * @return The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public Annotation getDefaultValueAnnotation() { return defaultValueAnnotation; }

	/**
	 * Setter for defaultValueAnnotation
	 * @param value The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public void setDefaultValueAnnotation(Annotation value) { defaultValueAnnotation = value; }


	@Expose
	private Attachment defaultValueAttachment;

	/**
	 * Getter for defaultValueAttachment
	 * @return The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public Attachment getDefaultValueAttachment() { return defaultValueAttachment; }

	/**
	 * Setter for defaultValueAttachment
	 * @param value The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public void setDefaultValueAttachment(Attachment value) { defaultValueAttachment = value; }


	@Expose
	private Identifier defaultValueIdentifier;

	/**
	 * Getter for defaultValueIdentifier
	 * @return The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public Identifier getDefaultValueIdentifier() { return defaultValueIdentifier; }

	/**
	 * Setter for defaultValueIdentifier
	 * @param value The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public void setDefaultValueIdentifier(Identifier value) { defaultValueIdentifier = value; }


	@Expose
	private CodeableConcept defaultValueCodeableConcept;

	/**
	 * Getter for defaultValueCodeableConcept
	 * @return The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public CodeableConcept getDefaultValueCodeableConcept() { return defaultValueCodeableConcept; }

	/**
	 * Setter for defaultValueCodeableConcept
	 * @param value The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public void setDefaultValueCodeableConcept(CodeableConcept value) { defaultValueCodeableConcept = value; }


	@Expose
	private Coding defaultValueCoding;

	/**
	 * Getter for defaultValueCoding
	 * @return The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public Coding getDefaultValueCoding() { return defaultValueCoding; }

	/**
	 * Setter for defaultValueCoding
	 * @param value The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public void setDefaultValueCoding(Coding value) { defaultValueCoding = value; }


	@Expose
	private Quantity defaultValueQuantity;

	/**
	 * Getter for defaultValueQuantity
	 * @return The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public Quantity getDefaultValueQuantity() { return defaultValueQuantity; }

	/**
	 * Setter for defaultValueQuantity
	 * @param value The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public void setDefaultValueQuantity(Quantity value) { defaultValueQuantity = value; }


	@Expose
	private Duration defaultValueDuration;

	/**
	 * Getter for defaultValueDuration
	 * @return The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public Duration getDefaultValueDuration() { return defaultValueDuration; }

	/**
	 * Setter for defaultValueDuration
	 * @param value The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public void setDefaultValueDuration(Duration value) { defaultValueDuration = value; }


	@Expose
	private Quantity defaultValueSimpleQuantity;

	/**
	 * Getter for defaultValueSimpleQuantity
	 * @return The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public Quantity getDefaultValueSimpleQuantity() { return defaultValueSimpleQuantity; }

	/**
	 * Setter for defaultValueSimpleQuantity
	 * @param value The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public void setDefaultValueSimpleQuantity(Quantity value) { defaultValueSimpleQuantity = value; }


	@Expose
	private Distance defaultValueDistance;

	/**
	 * Getter for defaultValueDistance
	 * @return The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public Distance getDefaultValueDistance() { return defaultValueDistance; }

	/**
	 * Setter for defaultValueDistance
	 * @param value The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public void setDefaultValueDistance(Distance value) { defaultValueDistance = value; }


	@Expose
	private Count defaultValueCount;

	/**
	 * Getter for defaultValueCount
	 * @return The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public Count getDefaultValueCount() { return defaultValueCount; }

	/**
	 * Setter for defaultValueCount
	 * @param value The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public void setDefaultValueCount(Count value) { defaultValueCount = value; }


	@Expose
	private Money defaultValueMoney;

	/**
	 * Getter for defaultValueMoney
	 * @return The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public Money getDefaultValueMoney() { return defaultValueMoney; }

	/**
	 * Setter for defaultValueMoney
	 * @param value The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public void setDefaultValueMoney(Money value) { defaultValueMoney = value; }


	@Expose
	private Age defaultValueAge;

	/**
	 * Getter for defaultValueAge
	 * @return The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public Age getDefaultValueAge() { return defaultValueAge; }

	/**
	 * Setter for defaultValueAge
	 * @param value The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public void setDefaultValueAge(Age value) { defaultValueAge = value; }


	@Expose
	private Range defaultValueRange;

	/**
	 * Getter for defaultValueRange
	 * @return The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public Range getDefaultValueRange() { return defaultValueRange; }

	/**
	 * Setter for defaultValueRange
	 * @param value The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public void setDefaultValueRange(Range value) { defaultValueRange = value; }


	@Expose
	private Period defaultValuePeriod;

	/**
	 * Getter for defaultValuePeriod
	 * @return The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public Period getDefaultValuePeriod() { return defaultValuePeriod; }

	/**
	 * Setter for defaultValuePeriod
	 * @param value The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public void setDefaultValuePeriod(Period value) { defaultValuePeriod = value; }


	@Expose
	private Ratio defaultValueRatio;

	/**
	 * Getter for defaultValueRatio
	 * @return The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public Ratio getDefaultValueRatio() { return defaultValueRatio; }

	/**
	 * Setter for defaultValueRatio
	 * @param value The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public void setDefaultValueRatio(Ratio value) { defaultValueRatio = value; }


	@Expose
	private Reference defaultValueReference;

	/**
	 * Getter for defaultValueReference
	 * @return The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public Reference getDefaultValueReference() { return defaultValueReference; }

	/**
	 * Setter for defaultValueReference
	 * @param value The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public void setDefaultValueReference(Reference value) { defaultValueReference = value; }


	@Expose
	private SampledData defaultValueSampledData;

	/**
	 * Getter for defaultValueSampledData
	 * @return The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public SampledData getDefaultValueSampledData() { return defaultValueSampledData; }

	/**
	 * Setter for defaultValueSampledData
	 * @param value The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public void setDefaultValueSampledData(SampledData value) { defaultValueSampledData = value; }


	@Expose
	private Signature defaultValueSignature;

	/**
	 * Getter for defaultValueSignature
	 * @return The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public Signature getDefaultValueSignature() { return defaultValueSignature; }

	/**
	 * Setter for defaultValueSignature
	 * @param value The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public void setDefaultValueSignature(Signature value) { defaultValueSignature = value; }


	@Expose
	private HumanName defaultValueHumanName;

	/**
	 * Getter for defaultValueHumanName
	 * @return The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public HumanName getDefaultValueHumanName() { return defaultValueHumanName; }

	/**
	 * Setter for defaultValueHumanName
	 * @param value The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public void setDefaultValueHumanName(HumanName value) { defaultValueHumanName = value; }


	@Expose
	private Address defaultValueAddress;

	/**
	 * Getter for defaultValueAddress
	 * @return The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public Address getDefaultValueAddress() { return defaultValueAddress; }

	/**
	 * Setter for defaultValueAddress
	 * @param value The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public void setDefaultValueAddress(Address value) { defaultValueAddress = value; }


	@Expose
	private ContactPoint defaultValueContactPoint;

	/**
	 * Getter for defaultValueContactPoint
	 * @return The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public ContactPoint getDefaultValueContactPoint() { return defaultValueContactPoint; }

	/**
	 * Setter for defaultValueContactPoint
	 * @param value The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public void setDefaultValueContactPoint(ContactPoint value) { defaultValueContactPoint = value; }


	@Expose
	private Timing defaultValueTiming;

	/**
	 * Getter for defaultValueTiming
	 * @return The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public Timing getDefaultValueTiming() { return defaultValueTiming; }

	/**
	 * Setter for defaultValueTiming
	 * @param value The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public void setDefaultValueTiming(Timing value) { defaultValueTiming = value; }


	@Expose
	private Meta defaultValueMeta;

	/**
	 * Getter for defaultValueMeta
	 * @return The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public Meta getDefaultValueMeta() { return defaultValueMeta; }

	/**
	 * Setter for defaultValueMeta
	 * @param value The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public void setDefaultValueMeta(Meta value) { defaultValueMeta = value; }


	@Expose
	private ElementDefinition defaultValueElementDefinition;

	/**
	 * Getter for defaultValueElementDefinition
	 * @return The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public ElementDefinition getDefaultValueElementDefinition() { return defaultValueElementDefinition; }

	/**
	 * Setter for defaultValueElementDefinition
	 * @param value The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public void setDefaultValueElementDefinition(ElementDefinition value) { defaultValueElementDefinition = value; }


	@Expose
	private ContactDetail defaultValueContactDetail;

	/**
	 * Getter for defaultValueContactDetail
	 * @return The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public ContactDetail getDefaultValueContactDetail() { return defaultValueContactDetail; }

	/**
	 * Setter for defaultValueContactDetail
	 * @param value The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public void setDefaultValueContactDetail(ContactDetail value) { defaultValueContactDetail = value; }


	@Expose
	private Contributor defaultValueContributor;

	/**
	 * Getter for defaultValueContributor
	 * @return The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public Contributor getDefaultValueContributor() { return defaultValueContributor; }

	/**
	 * Setter for defaultValueContributor
	 * @param value The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public void setDefaultValueContributor(Contributor value) { defaultValueContributor = value; }


	@Expose
	private Dosage defaultValueDosage;

	/**
	 * Getter for defaultValueDosage
	 * @return The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public Dosage getDefaultValueDosage() { return defaultValueDosage; }

	/**
	 * Setter for defaultValueDosage
	 * @param value The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public void setDefaultValueDosage(Dosage value) { defaultValueDosage = value; }


	@Expose
	private RelatedArtifact defaultValueRelatedArtifact;

	/**
	 * Getter for defaultValueRelatedArtifact
	 * @return The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public RelatedArtifact getDefaultValueRelatedArtifact() { return defaultValueRelatedArtifact; }

	/**
	 * Setter for defaultValueRelatedArtifact
	 * @param value The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public void setDefaultValueRelatedArtifact(RelatedArtifact value) { defaultValueRelatedArtifact = value; }


	@Expose
	private UsageContext defaultValueUsageContext;

	/**
	 * Getter for defaultValueUsageContext
	 * @return The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public UsageContext getDefaultValueUsageContext() { return defaultValueUsageContext; }

	/**
	 * Setter for defaultValueUsageContext
	 * @param value The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public void setDefaultValueUsageContext(UsageContext value) { defaultValueUsageContext = value; }


	@Expose
	private DataRequirement defaultValueDataRequirement;

	/**
	 * Getter for defaultValueDataRequirement
	 * @return The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public DataRequirement getDefaultValueDataRequirement() { return defaultValueDataRequirement; }

	/**
	 * Setter for defaultValueDataRequirement
	 * @param value The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public void setDefaultValueDataRequirement(DataRequirement value) { defaultValueDataRequirement = value; }


	@Expose
	private ParameterDefinition defaultValueParameterDefinition;

	/**
	 * Getter for defaultValueParameterDefinition
	 * @return The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public ParameterDefinition getDefaultValueParameterDefinition() { return defaultValueParameterDefinition; }

	/**
	 * Setter for defaultValueParameterDefinition
	 * @param value The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public void setDefaultValueParameterDefinition(ParameterDefinition value) { defaultValueParameterDefinition = value; }


	@Expose
	private TriggerDefinition defaultValueTriggerDefinition;

	/**
	 * Getter for defaultValueTriggerDefinition
	 * @return The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public TriggerDefinition getDefaultValueTriggerDefinition() { return defaultValueTriggerDefinition; }

	/**
	 * Setter for defaultValueTriggerDefinition
	 * @param value The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	 */
	public void setDefaultValueTriggerDefinition(TriggerDefinition value) { defaultValueTriggerDefinition = value; }


	@Expose
	private String meaningWhenMissing;

	/**
	 * Getter for meaningWhenMissing
	 * @return The Implicit meaning that is to be understood when this element is missing (e.g. 'when this element is missing, the period is ongoing'.
	 */
	public String getMeaningWhenMissing() { return meaningWhenMissing; }

	/**
	 * Setter for meaningWhenMissing
	 * @param value The Implicit meaning that is to be understood when this element is missing (e.g. 'when this element is missing, the period is ongoing'.
	 */
	public void setMeaningWhenMissing(String value) { meaningWhenMissing = value; }


	@Expose
	private String orderMeaning;

	/**
	 * Getter for orderMeaning
	 * @return If present, indicates that the order of the repeating element has meaning and describes what that meaning is.  If absent, it means that the order of the element has no meaning.
	 */
	public String getOrderMeaning() { return orderMeaning; }

	/**
	 * Setter for orderMeaning
	 * @param value If present, indicates that the order of the repeating element has meaning and describes what that meaning is.  If absent, it means that the order of the element has no meaning.
	 */
	public void setOrderMeaning(String value) { orderMeaning = value; }


	@Expose
	private boolean fixedBoolean;

	/**
	 * Getter for fixedBoolean
	 * @return Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public boolean getFixedBoolean() { return fixedBoolean; }

	/**
	 * Setter for fixedBoolean
	 * @param value Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public void setFixedBoolean(boolean value) { fixedBoolean = value; }


	@Expose
	private Integer fixedInteger;

	/**
	 * Getter for fixedInteger
	 * @return Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public Integer getFixedInteger() { return fixedInteger; }

	/**
	 * Setter for fixedInteger
	 * @param value Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public void setFixedInteger(Integer value) { fixedInteger = value; }


	@Expose
	private Double fixedDecimal;

	/**
	 * Getter for fixedDecimal
	 * @return Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public Double getFixedDecimal() { return fixedDecimal; }

	/**
	 * Setter for fixedDecimal
	 * @param value Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public void setFixedDecimal(Double value) { fixedDecimal = value; }


	@Expose
	private String fixedBase64Binary;

	/**
	 * Getter for fixedBase64Binary
	 * @return Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public String getFixedBase64Binary() { return fixedBase64Binary; }

	/**
	 * Setter for fixedBase64Binary
	 * @param value Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public void setFixedBase64Binary(String value) { fixedBase64Binary = value; }


	@Expose
	private String fixedInstant;

	/**
	 * Getter for fixedInstant
	 * @return Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public String getFixedInstant() { return fixedInstant; }

	/**
	 * Setter for fixedInstant
	 * @param value Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public void setFixedInstant(String value) { fixedInstant = value; }


	@Expose
	private String fixedString;

	/**
	 * Getter for fixedString
	 * @return Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public String getFixedString() { return fixedString; }

	/**
	 * Setter for fixedString
	 * @param value Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public void setFixedString(String value) { fixedString = value; }


	@Expose
	private String fixedUri;

	/**
	 * Getter for fixedUri
	 * @return Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public String getFixedUri() { return fixedUri; }

	/**
	 * Setter for fixedUri
	 * @param value Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public void setFixedUri(String value) { fixedUri = value; }


	@Expose
	@JsonAdapter(DateTypeAdapterDate.class)
	private Date fixedDate;

	/**
	 * Getter for fixedDate
	 * @return Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public Date getFixedDate() { return fixedDate; }

	/**
	 * Setter for fixedDate
	 * @param value Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public void setFixedDate(Date value) { fixedDate = value; }


	@Expose
	@JsonAdapter(DateTimeAdapterDateTime.class)
	private Date fixedDateTime;

	/**
	 * Getter for fixedDateTime
	 * @return Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public Date getFixedDateTime() { return fixedDateTime; }

	/**
	 * Setter for fixedDateTime
	 * @param value Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public void setFixedDateTime(Date value) { fixedDateTime = value; }


	@Expose
	@JsonAdapter(DateTypeAdapterTime.class)
	private Date fixedTime;

	/**
	 * Getter for fixedTime
	 * @return Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public Date getFixedTime() { return fixedTime; }

	/**
	 * Setter for fixedTime
	 * @param value Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public void setFixedTime(Date value) { fixedTime = value; }


	@Expose
	private String fixedCode;

	/**
	 * Getter for fixedCode
	 * @return Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public String getFixedCode() { return fixedCode; }

	/**
	 * Setter for fixedCode
	 * @param value Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public void setFixedCode(String value) { fixedCode = value; }


	@Expose
	private String fixedOid;

	/**
	 * Getter for fixedOid
	 * @return Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public String getFixedOid() { return fixedOid; }

	/**
	 * Setter for fixedOid
	 * @param value Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public void setFixedOid(String value) { fixedOid = value; }


	@Expose
	private String fixedUuid;

	/**
	 * Getter for fixedUuid
	 * @return Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public String getFixedUuid() { return fixedUuid; }

	/**
	 * Setter for fixedUuid
	 * @param value Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public void setFixedUuid(String value) { fixedUuid = value; }


	@Expose
	private String fixedId;

	/**
	 * Getter for fixedId
	 * @return Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public String getFixedId() { return fixedId; }

	/**
	 * Setter for fixedId
	 * @param value Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public void setFixedId(String value) { fixedId = value; }


	@Expose
	private Integer fixedUnsignedInt;

	/**
	 * Getter for fixedUnsignedInt
	 * @return Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public Integer getFixedUnsignedInt() { return fixedUnsignedInt; }

	/**
	 * Setter for fixedUnsignedInt
	 * @param value Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public void setFixedUnsignedInt(Integer value) { fixedUnsignedInt = value; }


	@Expose
	private Integer fixedPositiveInt;

	/**
	 * Getter for fixedPositiveInt
	 * @return Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public Integer getFixedPositiveInt() { return fixedPositiveInt; }

	/**
	 * Setter for fixedPositiveInt
	 * @param value Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public void setFixedPositiveInt(Integer value) { fixedPositiveInt = value; }


	@Expose
	private String fixedMarkdown;

	/**
	 * Getter for fixedMarkdown
	 * @return Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public String getFixedMarkdown() { return fixedMarkdown; }

	/**
	 * Setter for fixedMarkdown
	 * @param value Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public void setFixedMarkdown(String value) { fixedMarkdown = value; }


	@Expose
	private Element fixedElement;

	/**
	 * Getter for fixedElement
	 * @return Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public Element getFixedElement() { return fixedElement; }

	/**
	 * Setter for fixedElement
	 * @param value Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public void setFixedElement(Element value) { fixedElement = value; }


	@Expose
	private Extension fixedExtension;

	/**
	 * Getter for fixedExtension
	 * @return Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public Extension getFixedExtension() { return fixedExtension; }

	/**
	 * Setter for fixedExtension
	 * @param value Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public void setFixedExtension(Extension value) { fixedExtension = value; }


	@Expose
	private BackboneElement fixedBackboneElement;

	/**
	 * Getter for fixedBackboneElement
	 * @return Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public BackboneElement getFixedBackboneElement() { return fixedBackboneElement; }

	/**
	 * Setter for fixedBackboneElement
	 * @param value Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public void setFixedBackboneElement(BackboneElement value) { fixedBackboneElement = value; }


	@Expose
	private Narrative fixedNarrative;

	/**
	 * Getter for fixedNarrative
	 * @return Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public Narrative getFixedNarrative() { return fixedNarrative; }

	/**
	 * Setter for fixedNarrative
	 * @param value Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public void setFixedNarrative(Narrative value) { fixedNarrative = value; }


	@Expose
	private Annotation fixedAnnotation;

	/**
	 * Getter for fixedAnnotation
	 * @return Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public Annotation getFixedAnnotation() { return fixedAnnotation; }

	/**
	 * Setter for fixedAnnotation
	 * @param value Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public void setFixedAnnotation(Annotation value) { fixedAnnotation = value; }


	@Expose
	private Attachment fixedAttachment;

	/**
	 * Getter for fixedAttachment
	 * @return Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public Attachment getFixedAttachment() { return fixedAttachment; }

	/**
	 * Setter for fixedAttachment
	 * @param value Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public void setFixedAttachment(Attachment value) { fixedAttachment = value; }


	@Expose
	private Identifier fixedIdentifier;

	/**
	 * Getter for fixedIdentifier
	 * @return Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public Identifier getFixedIdentifier() { return fixedIdentifier; }

	/**
	 * Setter for fixedIdentifier
	 * @param value Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public void setFixedIdentifier(Identifier value) { fixedIdentifier = value; }


	@Expose
	private CodeableConcept fixedCodeableConcept;

	/**
	 * Getter for fixedCodeableConcept
	 * @return Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public CodeableConcept getFixedCodeableConcept() { return fixedCodeableConcept; }

	/**
	 * Setter for fixedCodeableConcept
	 * @param value Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public void setFixedCodeableConcept(CodeableConcept value) { fixedCodeableConcept = value; }


	@Expose
	private Coding fixedCoding;

	/**
	 * Getter for fixedCoding
	 * @return Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public Coding getFixedCoding() { return fixedCoding; }

	/**
	 * Setter for fixedCoding
	 * @param value Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public void setFixedCoding(Coding value) { fixedCoding = value; }


	@Expose
	private Quantity fixedQuantity;

	/**
	 * Getter for fixedQuantity
	 * @return Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public Quantity getFixedQuantity() { return fixedQuantity; }

	/**
	 * Setter for fixedQuantity
	 * @param value Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public void setFixedQuantity(Quantity value) { fixedQuantity = value; }


	@Expose
	private Duration fixedDuration;

	/**
	 * Getter for fixedDuration
	 * @return Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public Duration getFixedDuration() { return fixedDuration; }

	/**
	 * Setter for fixedDuration
	 * @param value Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public void setFixedDuration(Duration value) { fixedDuration = value; }


	@Expose
	private Quantity fixedSimpleQuantity;

	/**
	 * Getter for fixedSimpleQuantity
	 * @return Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public Quantity getFixedSimpleQuantity() { return fixedSimpleQuantity; }

	/**
	 * Setter for fixedSimpleQuantity
	 * @param value Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public void setFixedSimpleQuantity(Quantity value) { fixedSimpleQuantity = value; }


	@Expose
	private Distance fixedDistance;

	/**
	 * Getter for fixedDistance
	 * @return Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public Distance getFixedDistance() { return fixedDistance; }

	/**
	 * Setter for fixedDistance
	 * @param value Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public void setFixedDistance(Distance value) { fixedDistance = value; }


	@Expose
	private Count fixedCount;

	/**
	 * Getter for fixedCount
	 * @return Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public Count getFixedCount() { return fixedCount; }

	/**
	 * Setter for fixedCount
	 * @param value Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public void setFixedCount(Count value) { fixedCount = value; }


	@Expose
	private Money fixedMoney;

	/**
	 * Getter for fixedMoney
	 * @return Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public Money getFixedMoney() { return fixedMoney; }

	/**
	 * Setter for fixedMoney
	 * @param value Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public void setFixedMoney(Money value) { fixedMoney = value; }


	@Expose
	private Age fixedAge;

	/**
	 * Getter for fixedAge
	 * @return Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public Age getFixedAge() { return fixedAge; }

	/**
	 * Setter for fixedAge
	 * @param value Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public void setFixedAge(Age value) { fixedAge = value; }


	@Expose
	private Range fixedRange;

	/**
	 * Getter for fixedRange
	 * @return Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public Range getFixedRange() { return fixedRange; }

	/**
	 * Setter for fixedRange
	 * @param value Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public void setFixedRange(Range value) { fixedRange = value; }


	@Expose
	private Period fixedPeriod;

	/**
	 * Getter for fixedPeriod
	 * @return Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public Period getFixedPeriod() { return fixedPeriod; }

	/**
	 * Setter for fixedPeriod
	 * @param value Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public void setFixedPeriod(Period value) { fixedPeriod = value; }


	@Expose
	private Ratio fixedRatio;

	/**
	 * Getter for fixedRatio
	 * @return Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public Ratio getFixedRatio() { return fixedRatio; }

	/**
	 * Setter for fixedRatio
	 * @param value Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public void setFixedRatio(Ratio value) { fixedRatio = value; }


	@Expose
	private Reference fixedReference;

	/**
	 * Getter for fixedReference
	 * @return Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public Reference getFixedReference() { return fixedReference; }

	/**
	 * Setter for fixedReference
	 * @param value Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public void setFixedReference(Reference value) { fixedReference = value; }


	@Expose
	private SampledData fixedSampledData;

	/**
	 * Getter for fixedSampledData
	 * @return Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public SampledData getFixedSampledData() { return fixedSampledData; }

	/**
	 * Setter for fixedSampledData
	 * @param value Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public void setFixedSampledData(SampledData value) { fixedSampledData = value; }


	@Expose
	private Signature fixedSignature;

	/**
	 * Getter for fixedSignature
	 * @return Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public Signature getFixedSignature() { return fixedSignature; }

	/**
	 * Setter for fixedSignature
	 * @param value Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public void setFixedSignature(Signature value) { fixedSignature = value; }


	@Expose
	private HumanName fixedHumanName;

	/**
	 * Getter for fixedHumanName
	 * @return Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public HumanName getFixedHumanName() { return fixedHumanName; }

	/**
	 * Setter for fixedHumanName
	 * @param value Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public void setFixedHumanName(HumanName value) { fixedHumanName = value; }


	@Expose
	private Address fixedAddress;

	/**
	 * Getter for fixedAddress
	 * @return Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public Address getFixedAddress() { return fixedAddress; }

	/**
	 * Setter for fixedAddress
	 * @param value Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public void setFixedAddress(Address value) { fixedAddress = value; }


	@Expose
	private ContactPoint fixedContactPoint;

	/**
	 * Getter for fixedContactPoint
	 * @return Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public ContactPoint getFixedContactPoint() { return fixedContactPoint; }

	/**
	 * Setter for fixedContactPoint
	 * @param value Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public void setFixedContactPoint(ContactPoint value) { fixedContactPoint = value; }


	@Expose
	private Timing fixedTiming;

	/**
	 * Getter for fixedTiming
	 * @return Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public Timing getFixedTiming() { return fixedTiming; }

	/**
	 * Setter for fixedTiming
	 * @param value Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public void setFixedTiming(Timing value) { fixedTiming = value; }


	@Expose
	private Meta fixedMeta;

	/**
	 * Getter for fixedMeta
	 * @return Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public Meta getFixedMeta() { return fixedMeta; }

	/**
	 * Setter for fixedMeta
	 * @param value Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public void setFixedMeta(Meta value) { fixedMeta = value; }


	@Expose
	private ElementDefinition fixedElementDefinition;

	/**
	 * Getter for fixedElementDefinition
	 * @return Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public ElementDefinition getFixedElementDefinition() { return fixedElementDefinition; }

	/**
	 * Setter for fixedElementDefinition
	 * @param value Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public void setFixedElementDefinition(ElementDefinition value) { fixedElementDefinition = value; }


	@Expose
	private ContactDetail fixedContactDetail;

	/**
	 * Getter for fixedContactDetail
	 * @return Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public ContactDetail getFixedContactDetail() { return fixedContactDetail; }

	/**
	 * Setter for fixedContactDetail
	 * @param value Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public void setFixedContactDetail(ContactDetail value) { fixedContactDetail = value; }


	@Expose
	private Contributor fixedContributor;

	/**
	 * Getter for fixedContributor
	 * @return Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public Contributor getFixedContributor() { return fixedContributor; }

	/**
	 * Setter for fixedContributor
	 * @param value Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public void setFixedContributor(Contributor value) { fixedContributor = value; }


	@Expose
	private Dosage fixedDosage;

	/**
	 * Getter for fixedDosage
	 * @return Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public Dosage getFixedDosage() { return fixedDosage; }

	/**
	 * Setter for fixedDosage
	 * @param value Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public void setFixedDosage(Dosage value) { fixedDosage = value; }


	@Expose
	private RelatedArtifact fixedRelatedArtifact;

	/**
	 * Getter for fixedRelatedArtifact
	 * @return Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public RelatedArtifact getFixedRelatedArtifact() { return fixedRelatedArtifact; }

	/**
	 * Setter for fixedRelatedArtifact
	 * @param value Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public void setFixedRelatedArtifact(RelatedArtifact value) { fixedRelatedArtifact = value; }


	@Expose
	private UsageContext fixedUsageContext;

	/**
	 * Getter for fixedUsageContext
	 * @return Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public UsageContext getFixedUsageContext() { return fixedUsageContext; }

	/**
	 * Setter for fixedUsageContext
	 * @param value Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public void setFixedUsageContext(UsageContext value) { fixedUsageContext = value; }


	@Expose
	private DataRequirement fixedDataRequirement;

	/**
	 * Getter for fixedDataRequirement
	 * @return Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public DataRequirement getFixedDataRequirement() { return fixedDataRequirement; }

	/**
	 * Setter for fixedDataRequirement
	 * @param value Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public void setFixedDataRequirement(DataRequirement value) { fixedDataRequirement = value; }


	@Expose
	private ParameterDefinition fixedParameterDefinition;

	/**
	 * Getter for fixedParameterDefinition
	 * @return Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public ParameterDefinition getFixedParameterDefinition() { return fixedParameterDefinition; }

	/**
	 * Setter for fixedParameterDefinition
	 * @param value Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public void setFixedParameterDefinition(ParameterDefinition value) { fixedParameterDefinition = value; }


	@Expose
	private TriggerDefinition fixedTriggerDefinition;

	/**
	 * Getter for fixedTriggerDefinition
	 * @return Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public TriggerDefinition getFixedTriggerDefinition() { return fixedTriggerDefinition; }

	/**
	 * Setter for fixedTriggerDefinition
	 * @param value Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	 */
	public void setFixedTriggerDefinition(TriggerDefinition value) { fixedTriggerDefinition = value; }


	@Expose
	private boolean patternBoolean;

	/**
	 * Getter for patternBoolean
	 * @return Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public boolean getPatternBoolean() { return patternBoolean; }

	/**
	 * Setter for patternBoolean
	 * @param value Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public void setPatternBoolean(boolean value) { patternBoolean = value; }


	@Expose
	private Integer patternInteger;

	/**
	 * Getter for patternInteger
	 * @return Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public Integer getPatternInteger() { return patternInteger; }

	/**
	 * Setter for patternInteger
	 * @param value Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public void setPatternInteger(Integer value) { patternInteger = value; }


	@Expose
	private Double patternDecimal;

	/**
	 * Getter for patternDecimal
	 * @return Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public Double getPatternDecimal() { return patternDecimal; }

	/**
	 * Setter for patternDecimal
	 * @param value Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public void setPatternDecimal(Double value) { patternDecimal = value; }


	@Expose
	private String patternBase64Binary;

	/**
	 * Getter for patternBase64Binary
	 * @return Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public String getPatternBase64Binary() { return patternBase64Binary; }

	/**
	 * Setter for patternBase64Binary
	 * @param value Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public void setPatternBase64Binary(String value) { patternBase64Binary = value; }


	@Expose
	private String patternInstant;

	/**
	 * Getter for patternInstant
	 * @return Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public String getPatternInstant() { return patternInstant; }

	/**
	 * Setter for patternInstant
	 * @param value Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public void setPatternInstant(String value) { patternInstant = value; }


	@Expose
	private String patternString;

	/**
	 * Getter for patternString
	 * @return Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public String getPatternString() { return patternString; }

	/**
	 * Setter for patternString
	 * @param value Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public void setPatternString(String value) { patternString = value; }


	@Expose
	private String patternUri;

	/**
	 * Getter for patternUri
	 * @return Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public String getPatternUri() { return patternUri; }

	/**
	 * Setter for patternUri
	 * @param value Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public void setPatternUri(String value) { patternUri = value; }


	@Expose
	@JsonAdapter(DateTypeAdapterDate.class)
	private Date patternDate;

	/**
	 * Getter for patternDate
	 * @return Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public Date getPatternDate() { return patternDate; }

	/**
	 * Setter for patternDate
	 * @param value Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public void setPatternDate(Date value) { patternDate = value; }


	@Expose
	@JsonAdapter(DateTimeAdapterDateTime.class)
	private Date patternDateTime;

	/**
	 * Getter for patternDateTime
	 * @return Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public Date getPatternDateTime() { return patternDateTime; }

	/**
	 * Setter for patternDateTime
	 * @param value Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public void setPatternDateTime(Date value) { patternDateTime = value; }


	@Expose
	@JsonAdapter(DateTypeAdapterTime.class)
	private Date patternTime;

	/**
	 * Getter for patternTime
	 * @return Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public Date getPatternTime() { return patternTime; }

	/**
	 * Setter for patternTime
	 * @param value Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public void setPatternTime(Date value) { patternTime = value; }


	@Expose
	private String patternCode;

	/**
	 * Getter for patternCode
	 * @return Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public String getPatternCode() { return patternCode; }

	/**
	 * Setter for patternCode
	 * @param value Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public void setPatternCode(String value) { patternCode = value; }


	@Expose
	private String patternOid;

	/**
	 * Getter for patternOid
	 * @return Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public String getPatternOid() { return patternOid; }

	/**
	 * Setter for patternOid
	 * @param value Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public void setPatternOid(String value) { patternOid = value; }


	@Expose
	private String patternUuid;

	/**
	 * Getter for patternUuid
	 * @return Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public String getPatternUuid() { return patternUuid; }

	/**
	 * Setter for patternUuid
	 * @param value Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public void setPatternUuid(String value) { patternUuid = value; }


	@Expose
	private String patternId;

	/**
	 * Getter for patternId
	 * @return Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public String getPatternId() { return patternId; }

	/**
	 * Setter for patternId
	 * @param value Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public void setPatternId(String value) { patternId = value; }


	@Expose
	private Integer patternUnsignedInt;

	/**
	 * Getter for patternUnsignedInt
	 * @return Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public Integer getPatternUnsignedInt() { return patternUnsignedInt; }

	/**
	 * Setter for patternUnsignedInt
	 * @param value Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public void setPatternUnsignedInt(Integer value) { patternUnsignedInt = value; }


	@Expose
	private Integer patternPositiveInt;

	/**
	 * Getter for patternPositiveInt
	 * @return Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public Integer getPatternPositiveInt() { return patternPositiveInt; }

	/**
	 * Setter for patternPositiveInt
	 * @param value Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public void setPatternPositiveInt(Integer value) { patternPositiveInt = value; }


	@Expose
	private String patternMarkdown;

	/**
	 * Getter for patternMarkdown
	 * @return Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public String getPatternMarkdown() { return patternMarkdown; }

	/**
	 * Setter for patternMarkdown
	 * @param value Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public void setPatternMarkdown(String value) { patternMarkdown = value; }


	@Expose
	private Element patternElement;

	/**
	 * Getter for patternElement
	 * @return Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public Element getPatternElement() { return patternElement; }

	/**
	 * Setter for patternElement
	 * @param value Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public void setPatternElement(Element value) { patternElement = value; }


	@Expose
	private Extension patternExtension;

	/**
	 * Getter for patternExtension
	 * @return Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public Extension getPatternExtension() { return patternExtension; }

	/**
	 * Setter for patternExtension
	 * @param value Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public void setPatternExtension(Extension value) { patternExtension = value; }


	@Expose
	private BackboneElement patternBackboneElement;

	/**
	 * Getter for patternBackboneElement
	 * @return Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public BackboneElement getPatternBackboneElement() { return patternBackboneElement; }

	/**
	 * Setter for patternBackboneElement
	 * @param value Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public void setPatternBackboneElement(BackboneElement value) { patternBackboneElement = value; }


	@Expose
	private Narrative patternNarrative;

	/**
	 * Getter for patternNarrative
	 * @return Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public Narrative getPatternNarrative() { return patternNarrative; }

	/**
	 * Setter for patternNarrative
	 * @param value Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public void setPatternNarrative(Narrative value) { patternNarrative = value; }


	@Expose
	private Annotation patternAnnotation;

	/**
	 * Getter for patternAnnotation
	 * @return Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public Annotation getPatternAnnotation() { return patternAnnotation; }

	/**
	 * Setter for patternAnnotation
	 * @param value Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public void setPatternAnnotation(Annotation value) { patternAnnotation = value; }


	@Expose
	private Attachment patternAttachment;

	/**
	 * Getter for patternAttachment
	 * @return Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public Attachment getPatternAttachment() { return patternAttachment; }

	/**
	 * Setter for patternAttachment
	 * @param value Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public void setPatternAttachment(Attachment value) { patternAttachment = value; }


	@Expose
	private Identifier patternIdentifier;

	/**
	 * Getter for patternIdentifier
	 * @return Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public Identifier getPatternIdentifier() { return patternIdentifier; }

	/**
	 * Setter for patternIdentifier
	 * @param value Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public void setPatternIdentifier(Identifier value) { patternIdentifier = value; }


	@Expose
	private CodeableConcept patternCodeableConcept;

	/**
	 * Getter for patternCodeableConcept
	 * @return Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public CodeableConcept getPatternCodeableConcept() { return patternCodeableConcept; }

	/**
	 * Setter for patternCodeableConcept
	 * @param value Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public void setPatternCodeableConcept(CodeableConcept value) { patternCodeableConcept = value; }


	@Expose
	private Coding patternCoding;

	/**
	 * Getter for patternCoding
	 * @return Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public Coding getPatternCoding() { return patternCoding; }

	/**
	 * Setter for patternCoding
	 * @param value Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public void setPatternCoding(Coding value) { patternCoding = value; }


	@Expose
	private Quantity patternQuantity;

	/**
	 * Getter for patternQuantity
	 * @return Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public Quantity getPatternQuantity() { return patternQuantity; }

	/**
	 * Setter for patternQuantity
	 * @param value Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public void setPatternQuantity(Quantity value) { patternQuantity = value; }


	@Expose
	private Duration patternDuration;

	/**
	 * Getter for patternDuration
	 * @return Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public Duration getPatternDuration() { return patternDuration; }

	/**
	 * Setter for patternDuration
	 * @param value Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public void setPatternDuration(Duration value) { patternDuration = value; }


	@Expose
	private Quantity patternSimpleQuantity;

	/**
	 * Getter for patternSimpleQuantity
	 * @return Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public Quantity getPatternSimpleQuantity() { return patternSimpleQuantity; }

	/**
	 * Setter for patternSimpleQuantity
	 * @param value Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public void setPatternSimpleQuantity(Quantity value) { patternSimpleQuantity = value; }


	@Expose
	private Distance patternDistance;

	/**
	 * Getter for patternDistance
	 * @return Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public Distance getPatternDistance() { return patternDistance; }

	/**
	 * Setter for patternDistance
	 * @param value Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public void setPatternDistance(Distance value) { patternDistance = value; }


	@Expose
	private Count patternCount;

	/**
	 * Getter for patternCount
	 * @return Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public Count getPatternCount() { return patternCount; }

	/**
	 * Setter for patternCount
	 * @param value Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public void setPatternCount(Count value) { patternCount = value; }


	@Expose
	private Money patternMoney;

	/**
	 * Getter for patternMoney
	 * @return Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public Money getPatternMoney() { return patternMoney; }

	/**
	 * Setter for patternMoney
	 * @param value Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public void setPatternMoney(Money value) { patternMoney = value; }


	@Expose
	private Age patternAge;

	/**
	 * Getter for patternAge
	 * @return Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public Age getPatternAge() { return patternAge; }

	/**
	 * Setter for patternAge
	 * @param value Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public void setPatternAge(Age value) { patternAge = value; }


	@Expose
	private Range patternRange;

	/**
	 * Getter for patternRange
	 * @return Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public Range getPatternRange() { return patternRange; }

	/**
	 * Setter for patternRange
	 * @param value Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public void setPatternRange(Range value) { patternRange = value; }


	@Expose
	private Period patternPeriod;

	/**
	 * Getter for patternPeriod
	 * @return Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public Period getPatternPeriod() { return patternPeriod; }

	/**
	 * Setter for patternPeriod
	 * @param value Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public void setPatternPeriod(Period value) { patternPeriod = value; }


	@Expose
	private Ratio patternRatio;

	/**
	 * Getter for patternRatio
	 * @return Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public Ratio getPatternRatio() { return patternRatio; }

	/**
	 * Setter for patternRatio
	 * @param value Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public void setPatternRatio(Ratio value) { patternRatio = value; }


	@Expose
	private Reference patternReference;

	/**
	 * Getter for patternReference
	 * @return Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public Reference getPatternReference() { return patternReference; }

	/**
	 * Setter for patternReference
	 * @param value Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public void setPatternReference(Reference value) { patternReference = value; }


	@Expose
	private SampledData patternSampledData;

	/**
	 * Getter for patternSampledData
	 * @return Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public SampledData getPatternSampledData() { return patternSampledData; }

	/**
	 * Setter for patternSampledData
	 * @param value Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public void setPatternSampledData(SampledData value) { patternSampledData = value; }


	@Expose
	private Signature patternSignature;

	/**
	 * Getter for patternSignature
	 * @return Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public Signature getPatternSignature() { return patternSignature; }

	/**
	 * Setter for patternSignature
	 * @param value Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public void setPatternSignature(Signature value) { patternSignature = value; }


	@Expose
	private HumanName patternHumanName;

	/**
	 * Getter for patternHumanName
	 * @return Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public HumanName getPatternHumanName() { return patternHumanName; }

	/**
	 * Setter for patternHumanName
	 * @param value Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public void setPatternHumanName(HumanName value) { patternHumanName = value; }


	@Expose
	private Address patternAddress;

	/**
	 * Getter for patternAddress
	 * @return Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public Address getPatternAddress() { return patternAddress; }

	/**
	 * Setter for patternAddress
	 * @param value Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public void setPatternAddress(Address value) { patternAddress = value; }


	@Expose
	private ContactPoint patternContactPoint;

	/**
	 * Getter for patternContactPoint
	 * @return Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public ContactPoint getPatternContactPoint() { return patternContactPoint; }

	/**
	 * Setter for patternContactPoint
	 * @param value Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public void setPatternContactPoint(ContactPoint value) { patternContactPoint = value; }


	@Expose
	private Timing patternTiming;

	/**
	 * Getter for patternTiming
	 * @return Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public Timing getPatternTiming() { return patternTiming; }

	/**
	 * Setter for patternTiming
	 * @param value Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public void setPatternTiming(Timing value) { patternTiming = value; }


	@Expose
	private Meta patternMeta;

	/**
	 * Getter for patternMeta
	 * @return Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public Meta getPatternMeta() { return patternMeta; }

	/**
	 * Setter for patternMeta
	 * @param value Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public void setPatternMeta(Meta value) { patternMeta = value; }


	@Expose
	private ElementDefinition patternElementDefinition;

	/**
	 * Getter for patternElementDefinition
	 * @return Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public ElementDefinition getPatternElementDefinition() { return patternElementDefinition; }

	/**
	 * Setter for patternElementDefinition
	 * @param value Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public void setPatternElementDefinition(ElementDefinition value) { patternElementDefinition = value; }


	@Expose
	private ContactDetail patternContactDetail;

	/**
	 * Getter for patternContactDetail
	 * @return Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public ContactDetail getPatternContactDetail() { return patternContactDetail; }

	/**
	 * Setter for patternContactDetail
	 * @param value Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public void setPatternContactDetail(ContactDetail value) { patternContactDetail = value; }


	@Expose
	private Contributor patternContributor;

	/**
	 * Getter for patternContributor
	 * @return Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public Contributor getPatternContributor() { return patternContributor; }

	/**
	 * Setter for patternContributor
	 * @param value Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public void setPatternContributor(Contributor value) { patternContributor = value; }


	@Expose
	private Dosage patternDosage;

	/**
	 * Getter for patternDosage
	 * @return Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public Dosage getPatternDosage() { return patternDosage; }

	/**
	 * Setter for patternDosage
	 * @param value Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public void setPatternDosage(Dosage value) { patternDosage = value; }


	@Expose
	private RelatedArtifact patternRelatedArtifact;

	/**
	 * Getter for patternRelatedArtifact
	 * @return Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public RelatedArtifact getPatternRelatedArtifact() { return patternRelatedArtifact; }

	/**
	 * Setter for patternRelatedArtifact
	 * @param value Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public void setPatternRelatedArtifact(RelatedArtifact value) { patternRelatedArtifact = value; }


	@Expose
	private UsageContext patternUsageContext;

	/**
	 * Getter for patternUsageContext
	 * @return Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public UsageContext getPatternUsageContext() { return patternUsageContext; }

	/**
	 * Setter for patternUsageContext
	 * @param value Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public void setPatternUsageContext(UsageContext value) { patternUsageContext = value; }


	@Expose
	private DataRequirement patternDataRequirement;

	/**
	 * Getter for patternDataRequirement
	 * @return Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public DataRequirement getPatternDataRequirement() { return patternDataRequirement; }

	/**
	 * Setter for patternDataRequirement
	 * @param value Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public void setPatternDataRequirement(DataRequirement value) { patternDataRequirement = value; }


	@Expose
	private ParameterDefinition patternParameterDefinition;

	/**
	 * Getter for patternParameterDefinition
	 * @return Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public ParameterDefinition getPatternParameterDefinition() { return patternParameterDefinition; }

	/**
	 * Setter for patternParameterDefinition
	 * @param value Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public void setPatternParameterDefinition(ParameterDefinition value) { patternParameterDefinition = value; }


	@Expose
	private TriggerDefinition patternTriggerDefinition;

	/**
	 * Getter for patternTriggerDefinition
	 * @return Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public TriggerDefinition getPatternTriggerDefinition() { return patternTriggerDefinition; }

	/**
	 * Setter for patternTriggerDefinition
	 * @param value Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).
	 */
	public void setPatternTriggerDefinition(TriggerDefinition value) { patternTriggerDefinition = value; }


	@Expose
	private ArrayList<ElementDefinitionExample> example;

	/**
	 * Getter for example
	 * @return A sample value for this element demonstrating the type of information that would typically be found in the element.
	 */
	public ArrayList<ElementDefinitionExample> getExample() { return example; }

	/**
	 * Setter for example
	 * @param value A sample value for this element demonstrating the type of information that would typically be found in the element.
	 */
	public void setExample(ArrayList<ElementDefinitionExample> value) { example = value; }


	@Expose
	@JsonAdapter(DateTypeAdapterDate.class)
	private Date minValueDate;

	/**
	 * Getter for minValueDate
	 * @return The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	 */
	public Date getMinValueDate() { return minValueDate; }

	/**
	 * Setter for minValueDate
	 * @param value The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	 */
	public void setMinValueDate(Date value) { minValueDate = value; }


	@Expose
	@JsonAdapter(DateTimeAdapterDateTime.class)
	private Date minValueDateTime;

	/**
	 * Getter for minValueDateTime
	 * @return The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	 */
	public Date getMinValueDateTime() { return minValueDateTime; }

	/**
	 * Setter for minValueDateTime
	 * @param value The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	 */
	public void setMinValueDateTime(Date value) { minValueDateTime = value; }


	@Expose
	private String minValueInstant;

	/**
	 * Getter for minValueInstant
	 * @return The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	 */
	public String getMinValueInstant() { return minValueInstant; }

	/**
	 * Setter for minValueInstant
	 * @param value The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	 */
	public void setMinValueInstant(String value) { minValueInstant = value; }


	@Expose
	@JsonAdapter(DateTypeAdapterTime.class)
	private Date minValueTime;

	/**
	 * Getter for minValueTime
	 * @return The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	 */
	public Date getMinValueTime() { return minValueTime; }

	/**
	 * Setter for minValueTime
	 * @param value The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	 */
	public void setMinValueTime(Date value) { minValueTime = value; }


	@Expose
	private Double minValueDecimal;

	/**
	 * Getter for minValueDecimal
	 * @return The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	 */
	public Double getMinValueDecimal() { return minValueDecimal; }

	/**
	 * Setter for minValueDecimal
	 * @param value The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	 */
	public void setMinValueDecimal(Double value) { minValueDecimal = value; }


	@Expose
	private Integer minValueInteger;

	/**
	 * Getter for minValueInteger
	 * @return The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	 */
	public Integer getMinValueInteger() { return minValueInteger; }

	/**
	 * Setter for minValueInteger
	 * @param value The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	 */
	public void setMinValueInteger(Integer value) { minValueInteger = value; }


	@Expose
	private Integer minValuePositiveInt;

	/**
	 * Getter for minValuePositiveInt
	 * @return The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	 */
	public Integer getMinValuePositiveInt() { return minValuePositiveInt; }

	/**
	 * Setter for minValuePositiveInt
	 * @param value The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	 */
	public void setMinValuePositiveInt(Integer value) { minValuePositiveInt = value; }


	@Expose
	private Integer minValueUnsignedInt;

	/**
	 * Getter for minValueUnsignedInt
	 * @return The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	 */
	public Integer getMinValueUnsignedInt() { return minValueUnsignedInt; }

	/**
	 * Setter for minValueUnsignedInt
	 * @param value The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	 */
	public void setMinValueUnsignedInt(Integer value) { minValueUnsignedInt = value; }


	@Expose
	private Quantity minValueQuantity;

	/**
	 * Getter for minValueQuantity
	 * @return The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	 */
	public Quantity getMinValueQuantity() { return minValueQuantity; }

	/**
	 * Setter for minValueQuantity
	 * @param value The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	 */
	public void setMinValueQuantity(Quantity value) { minValueQuantity = value; }


	@Expose
	@JsonAdapter(DateTypeAdapterDate.class)
	private Date maxValueDate;

	/**
	 * Getter for maxValueDate
	 * @return The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	 */
	public Date getMaxValueDate() { return maxValueDate; }

	/**
	 * Setter for maxValueDate
	 * @param value The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	 */
	public void setMaxValueDate(Date value) { maxValueDate = value; }


	@Expose
	@JsonAdapter(DateTimeAdapterDateTime.class)
	private Date maxValueDateTime;

	/**
	 * Getter for maxValueDateTime
	 * @return The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	 */
	public Date getMaxValueDateTime() { return maxValueDateTime; }

	/**
	 * Setter for maxValueDateTime
	 * @param value The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	 */
	public void setMaxValueDateTime(Date value) { maxValueDateTime = value; }


	@Expose
	private String maxValueInstant;

	/**
	 * Getter for maxValueInstant
	 * @return The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	 */
	public String getMaxValueInstant() { return maxValueInstant; }

	/**
	 * Setter for maxValueInstant
	 * @param value The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	 */
	public void setMaxValueInstant(String value) { maxValueInstant = value; }


	@Expose
	@JsonAdapter(DateTypeAdapterTime.class)
	private Date maxValueTime;

	/**
	 * Getter for maxValueTime
	 * @return The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	 */
	public Date getMaxValueTime() { return maxValueTime; }

	/**
	 * Setter for maxValueTime
	 * @param value The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	 */
	public void setMaxValueTime(Date value) { maxValueTime = value; }


	@Expose
	private Double maxValueDecimal;

	/**
	 * Getter for maxValueDecimal
	 * @return The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	 */
	public Double getMaxValueDecimal() { return maxValueDecimal; }

	/**
	 * Setter for maxValueDecimal
	 * @param value The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	 */
	public void setMaxValueDecimal(Double value) { maxValueDecimal = value; }


	@Expose
	private Integer maxValueInteger;

	/**
	 * Getter for maxValueInteger
	 * @return The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	 */
	public Integer getMaxValueInteger() { return maxValueInteger; }

	/**
	 * Setter for maxValueInteger
	 * @param value The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	 */
	public void setMaxValueInteger(Integer value) { maxValueInteger = value; }


	@Expose
	private Integer maxValuePositiveInt;

	/**
	 * Getter for maxValuePositiveInt
	 * @return The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	 */
	public Integer getMaxValuePositiveInt() { return maxValuePositiveInt; }

	/**
	 * Setter for maxValuePositiveInt
	 * @param value The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	 */
	public void setMaxValuePositiveInt(Integer value) { maxValuePositiveInt = value; }


	@Expose
	private Integer maxValueUnsignedInt;

	/**
	 * Getter for maxValueUnsignedInt
	 * @return The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	 */
	public Integer getMaxValueUnsignedInt() { return maxValueUnsignedInt; }

	/**
	 * Setter for maxValueUnsignedInt
	 * @param value The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	 */
	public void setMaxValueUnsignedInt(Integer value) { maxValueUnsignedInt = value; }


	@Expose
	private Quantity maxValueQuantity;

	/**
	 * Getter for maxValueQuantity
	 * @return The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	 */
	public Quantity getMaxValueQuantity() { return maxValueQuantity; }

	/**
	 * Setter for maxValueQuantity
	 * @param value The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	 */
	public void setMaxValueQuantity(Quantity value) { maxValueQuantity = value; }


	@Expose
	private Integer maxLength;

	/**
	 * Getter for maxLength
	 * @return Indicates the maximum length in characters that is permitted to be present in conformant instances and which is expected to be supported by conformant consumers that support the element.
	 */
	public Integer getMaxLength() { return maxLength; }

	/**
	 * Setter for maxLength
	 * @param value Indicates the maximum length in characters that is permitted to be present in conformant instances and which is expected to be supported by conformant consumers that support the element.
	 */
	public void setMaxLength(Integer value) { maxLength = value; }


	@Expose
	private ArrayList<String> condition;

	/**
	 * Getter for condition
	 * @return A reference to an invariant that may make additional statements about the cardinality or value in the instance.
	 */
	public ArrayList<String> getCondition() { return condition; }

	/**
	 * Setter for condition
	 * @param value A reference to an invariant that may make additional statements about the cardinality or value in the instance.
	 */
	public void setCondition(ArrayList<String> value) { condition = value; }


	@Expose
	private ArrayList<ElementDefinitionConstraint> constraint;

	/**
	 * Getter for constraint
	 * @return Formal constraints such as co-occurrence and other constraints that can be computationally evaluated within the context of the instance.
	 */
	public ArrayList<ElementDefinitionConstraint> getConstraint() { return constraint; }

	/**
	 * Setter for constraint
	 * @param value Formal constraints such as co-occurrence and other constraints that can be computationally evaluated within the context of the instance.
	 */
	public void setConstraint(ArrayList<ElementDefinitionConstraint> value) { constraint = value; }


	@Expose
	private boolean mustSupport;

	/**
	 * Getter for mustSupport
	 * @return If true, implementations that produce or consume resources SHALL provide "support" for the element in some meaningful way.  If false, the element may be ignored and not supported.
	 */
	public boolean getMustSupport() { return mustSupport; }

	/**
	 * Setter for mustSupport
	 * @param value If true, implementations that produce or consume resources SHALL provide "support" for the element in some meaningful way.  If false, the element may be ignored and not supported.
	 */
	public void setMustSupport(boolean value) { mustSupport = value; }


	@Expose
	private boolean isModifier;

	/**
	 * Getter for isModifier
	 * @return If true, the value of this element affects the interpretation of the element or resource that contains it, and the value of the element cannot be ignored. Typically, this is used for status, negation and qualification codes. The effect of this is that the element cannot be ignored by systems: they SHALL either recognize the element and process it, and/or a pre-determination has been made that it is not relevant to their particular system.
	 */
	public boolean getIsModifier() { return isModifier; }

	/**
	 * Setter for isModifier
	 * @param value If true, the value of this element affects the interpretation of the element or resource that contains it, and the value of the element cannot be ignored. Typically, this is used for status, negation and qualification codes. The effect of this is that the element cannot be ignored by systems: they SHALL either recognize the element and process it, and/or a pre-determination has been made that it is not relevant to their particular system.
	 */
	public void setIsModifier(boolean value) { isModifier = value; }


	@Expose
	private boolean isSummary;

	/**
	 * Getter for isSummary
	 * @return Whether the element should be included if a client requests a search with the parameter _summary=true.
	 */
	public boolean getIsSummary() { return isSummary; }

	/**
	 * Setter for isSummary
	 * @param value Whether the element should be included if a client requests a search with the parameter _summary=true.
	 */
	public void setIsSummary(boolean value) { isSummary = value; }


	@Expose
	private ElementDefinitionBinding binding;

	/**
	 * Getter for binding
	 * @return Binds to a value set if this element is coded (code, Coding, CodeableConcept, Quantity), or the data types (string, uri).
	 */
	public ElementDefinitionBinding getBinding() { return binding; }

	/**
	 * Setter for binding
	 * @param value Binds to a value set if this element is coded (code, Coding, CodeableConcept, Quantity), or the data types (string, uri).
	 */
	public void setBinding(ElementDefinitionBinding value) { binding = value; }


	@Expose
	private ArrayList<ElementDefinitionMapping> mapping;

	/**
	 * Getter for mapping
	 * @return Identifies a concept from an external specification that roughly corresponds to this element.
	 */
	public ArrayList<ElementDefinitionMapping> getMapping() { return mapping; }

	/**
	 * Setter for mapping
	 * @param value Identifies a concept from an external specification that roughly corresponds to this element.
	 */
	public void setMapping(ArrayList<ElementDefinitionMapping> value) { mapping = value; }


}
